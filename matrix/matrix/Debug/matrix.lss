
matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000252  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010c  0080010c  000002f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ce  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ef  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f2  00000000  00000000  00001ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000025d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000587  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004de  00000000  00000000  00002d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000031f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	91 c0       	rjmp	.+290    	; 0x158 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e5       	ldi	r30, 0x52	; 82
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ab d0       	rcall	.+342    	; 0x21a <main>
  c4:	c4 c0       	rjmp	.+392    	; 0x24e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <TimerSet>:
  ee:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  f2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  fe:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <__data_end>
 102:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <__data_end+0x1>
 106:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end+0x2>
 10a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x3>
 10e:	08 95       	ret

00000110 <TimerOn>:
 110:	8b e0       	ldi	r24, 0x0B	; 11
 112:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 116:	8d e7       	ldi	r24, 0x7D	; 125
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 11e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 128:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 12c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 134:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 138:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 13c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 140:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 144:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 148:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 14c:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
 150:	8f b7       	in	r24, 0x3f	; 63
 152:	80 68       	ori	r24, 0x80	; 128
 154:	8f bf       	out	0x3f, r24	; 63
 156:	08 95       	ret

00000158 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 16a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 16e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 172:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__data_end+0x2>
 176:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__data_end+0x3>
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	a1 09       	sbc	r26, r1
 17e:	b1 09       	sbc	r27, r1
 180:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 184:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 188:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 18c:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 190:	89 2b       	or	r24, r25
 192:	8a 2b       	or	r24, r26
 194:	8b 2b       	or	r24, r27
 196:	99 f4       	brne	.+38     	; 0x1be <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 19e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1aa:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ae:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 1b2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 1b6:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 1ba:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
	}
}
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <ShRegInit>:


//Initialize Shift Register
void ShRegInit() {
    // Data, Shift clock, Store Clock output
    SET_BIT(SHIFT_DDR,SHIFT_LINE);
 1d0:	21 9a       	sbi	0x04, 1	; 4
    SET_BIT(SHIFT_DDR,STORE_LINE);
 1d2:	22 9a       	sbi	0x04, 2	; 4
    SET_BIT(SHIFT_DDR,DATA_LINE);
 1d4:	20 9a       	sbi	0x04, 0	; 4
 1d6:	08 95       	ret

000001d8 <ShRegDataHigh>:
}

//Set Data line high
void ShRegDataHigh() {
    SET_BIT(SHIFT_PORT,DATA_LINE);
 1d8:	28 9a       	sbi	0x05, 0	; 5
 1da:	08 95       	ret

000001dc <ShRegDataLow>:
}

//Set Data line low
void ShRegDataLow() {
    CLR_BIT(SHIFT_PORT,DATA_LINE);
 1dc:	28 98       	cbi	0x05, 0	; 5
 1de:	08 95       	ret

000001e0 <ShRegPulse>:
}

//Pulse Shift Clock
void ShRegPulse() {
    SET_BIT(SHIFT_PORT,SHIFT_LINE);
 1e0:	29 9a       	sbi	0x05, 1	; 5
    CLR_BIT(SHIFT_PORT,SHIFT_LINE);
 1e2:	29 98       	cbi	0x05, 1	; 5
 1e4:	08 95       	ret

000001e6 <ShRegLatch>:
}

//Pulse Store Clock
void ShRegLatch() {
    SET_BIT(SHIFT_PORT,STORE_LINE);
 1e6:	2a 9a       	sbi	0x05, 2	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	98 2f       	mov	r25, r24
 1ec:	9a 95       	dec	r25
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <ShRegLatch+0x6>
    _delay_loop_1(1);

    CLR_BIT(SHIFT_PORT,STORE_LINE);
 1f0:	2a 98       	cbi	0x05, 2	; 5
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <ShRegLatch+0xc>
 1f6:	08 95       	ret

000001f8 <ShRegWrite>:
    _delay_loop_1(1);
}


void ShRegWrite(unsigned char data) {
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	d8 2f       	mov	r29, r24
 1fe:	c8 e0       	ldi	r28, 0x08	; 8
    for(unsigned char i=0;i<8;i++) {
        if(data & 0b10000000) {
 200:	dd 23       	and	r29, r29
 202:	14 f4       	brge	.+4      	; 0x208 <ShRegWrite+0x10>
            ShRegDataHigh();
 204:	e9 df       	rcall	.-46     	; 0x1d8 <ShRegDataHigh>
 206:	01 c0       	rjmp	.+2      	; 0x20a <ShRegWrite+0x12>
            } else {
            ShRegDataLow();
 208:	e9 df       	rcall	.-46     	; 0x1dc <ShRegDataLow>
        }

        ShRegPulse();
 20a:	ea df       	rcall	.-44     	; 0x1e0 <ShRegPulse>
 20c:	dd 0f       	add	r29, r29
        data=data<<1;
 20e:	c1 50       	subi	r28, 0x01	; 1
    _delay_loop_1(1);
}


void ShRegWrite(unsigned char data) {
    for(unsigned char i=0;i<8;i++) {
 210:	b9 f7       	brne	.-18     	; 0x200 <ShRegWrite+0x8>

        ShRegPulse();
        data=data<<1;
    }

    ShRegLatch();
 212:	e9 df       	rcall	.-46     	; 0x1e6 <ShRegLatch>
 214:	df 91       	pop	r29
}
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <main>:
 21a:	da df       	rcall	.-76     	; 0x1d0 <ShRegInit>
int main(void){
    ShRegInit();
    DDRB = 0x00; PORTA = 0xFF;
 21c:	14 b8       	out	0x04, r1	; 4
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	82 b9       	out	0x02, r24	; 2
    DDRB = 0xFF; PORTB = 0x00;
 222:	84 b9       	out	0x04, r24	; 4
 224:	15 b8       	out	0x05, r1	; 5
    unsigned char button = 0;
    //ShRegWrite(255);
    TimerSet(200);
 226:	68 ec       	ldi	r22, 0xC8	; 200
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
    TimerOn();
 22e:	5f df       	rcall	.-322    	; 0xee <TimerSet>
 230:	6f df       	rcall	.-290    	; 0x110 <TimerOn>
 232:	0c e0       	ldi	r16, 0x0C	; 12
 234:	11 e0       	ldi	r17, 0x01	; 1
    while(1){
        button = ~PINA & 0x01;
 236:	80 b1       	in	r24, 0x00	; 0
 238:	c4 e0       	ldi	r28, 0x04	; 4
        //if(button){
        for(unsigned char i =0; i<8; i++){
            
            ShRegWrite(arrow[i]);
 23a:	d1 e0       	ldi	r29, 0x01	; 1
 23c:	89 91       	ld	r24, Y+
            //ShRegWrite(128>>i);
            delay_ms(5);
 23e:	dc df       	rcall	.-72     	; 0x1f8 <ShRegWrite>
 240:	85 e0       	ldi	r24, 0x05	; 5
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	41 df       	rcall	.-382    	; 0xc8 <delay_ms>
    TimerSet(200);
    TimerOn();
    while(1){
        button = ~PINA & 0x01;
        //if(button){
        for(unsigned char i =0; i<8; i++){
 246:	c0 17       	cp	r28, r16
 248:	d1 07       	cpc	r29, r17
 24a:	c1 f7       	brne	.-16     	; 0x23c <main+0x22>
 24c:	f4 cf       	rjmp	.-24     	; 0x236 <main+0x1c>

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
